MODEL_NAME:  optuna_processed_transposition_convbbt
Start time:  2023-10-10 14:15:57.064507
Device:  cuda
Max Epochs:  200
Early Stopping Reference Size:  5
Search Space:  {'lr': [1e-06, 1e-05, 0.0001, 0.001], 'beta1': [0.9, 0.95, 0.99, 0.999], 'beta2': [0.9, 0.95, 0.99, 0.999], 'eps': [1e-09, 1e-08, 1e-07, 1e-06], 'hidden_ch': [10, 20, 30, 35, 40, 45, 50, 55, 60, 65, 70, 80, 90, 100], 'hidden_dim': [1, 3, 4, 8, 12, 16, 20, 32, 64, 128], 'depth': [1, 3, 5, 6, 8], 'heads': [1, 3, 5, 6, 8, 10], 'mlp_dim': [256, 512, 1024, 2048], 'dropout': [0.01, 0.1, 0.25, 0.5, 0.8], 'emb_dropout': [0.01, 0.1, 0.25, 0.5, 0.8]}
Accuracy: 0.38518429487179484
Accuracy: 0.31325587606837607
Accuracy: 0.31458600427350425
Accuracy: 0.3836324786324786
Accuracy: 0.38429754273504274
Accuracy: 0.38385416666666666
Accuracy: 0.385849358974359
Accuracy: 0.3694684829059829
Accuracy: 0.385627670940171
Accuracy: 0.2950053418803419
Accuracy: 0.3840384615384615
Accuracy: 0.35217948717948716
Accuracy: 0.3065438034188034
Accuracy: 0.3834107905982906
Accuracy: 0.38429754273504274
Accuracy: 0.3490438034188034
FrozenTrial(number=6, state=TrialState.COMPLETE, values=[0.385849358974359], datetime_start=datetime.datetime(2023, 10, 10, 15, 0, 27, 965363), datetime_complete=datetime.datetime(2023, 10, 10, 15, 7, 19, 98975), params={'lr': 0.001, 'beta1': 0.95, 'beta2': 0.95, 'eps': 1e-06, 'hidden_dim': 8, 'hidden_ch': 30, 'depth': 5, 'heads': 5, 'mlp_dim': 256, 'dropout': 0.8, 'emb_dropout': 0.8}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'lr': CategoricalDistribution(choices=(1e-06, 1e-05, 0.0001, 0.001)), 'beta1': CategoricalDistribution(choices=(0.9, 0.95, 0.99, 0.999)), 'beta2': CategoricalDistribution(choices=(0.9, 0.95, 0.99, 0.999)), 'eps': CategoricalDistribution(choices=(1e-09, 1e-08, 1e-07, 1e-06)), 'hidden_dim': CategoricalDistribution(choices=(1, 3, 4, 8, 12, 16, 20, 32, 64, 128)), 'hidden_ch': CategoricalDistribution(choices=(10, 20, 30, 35, 40, 45, 50, 55, 60, 65, 70, 80, 90, 100)), 'depth': CategoricalDistribution(choices=(1, 3, 5, 6, 8)), 'heads': CategoricalDistribution(choices=(1, 3, 5, 6, 8, 10)), 'mlp_dim': CategoricalDistribution(choices=(256, 512, 1024, 2048)), 'dropout': CategoricalDistribution(choices=(0.01, 0.1, 0.25, 0.5, 0.8)), 'emb_dropout': CategoricalDistribution(choices=(0.01, 0.1, 0.25, 0.5, 0.8))}, trial_id=6, value=None)
